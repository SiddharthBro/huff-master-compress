import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Download, Package2, RotateCcw, FileText } from 'lucide-react';
import { CompressionResult } from '@/lib/huffman';

interface CompressionControlsProps {
  content: string | null;
  filename: string | null;
  result: CompressionResult | null;
  onCompress: () => void;
  onReset: () => void;
  isCompressing: boolean;
}

export function CompressionControls({ 
  content, 
  filename, 
  result, 
  onCompress, 
  onReset, 
  isCompressing 
}: CompressionControlsProps) {
  const [showPreview, setShowPreview] = useState(false);

  const downloadCompressed = () => {
    if (!result || !filename) return;

    const compressedData = {
      original_filename: filename,
      compressed_data: result.compressed,
      huffman_codes: result.codes,
      original_size: result.originalSize,
      compressed_size: result.compressedSize,
      compression_ratio: result.compressionRatio,
      metadata: {
        algorithm: 'Huffman Coding',
        timestamp: new Date().toISOString(),
        version: '1.0'
      }
    };

    const blob = new Blob([JSON.stringify(compressedData, null, 2)], { 
      type: 'application/json' 
    });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${filename.replace(/\.[^/.]+$/, '')}_compressed.huff`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const downloadStats = () => {
    if (!result || !filename) return;

    const stats = `Huffman Compression Report
=============================

File: ${filename}
Algorithm: Huffman Coding with Greedy Approach
Timestamp: ${new Date().toISOString()}

Compression Statistics:
- Original Size: ${(result.originalSize / 8).toFixed(0)} bytes (${result.originalSize} bits)
- Compressed Size: ${(result.compressedSize / 8).toFixed(0)} bytes (${result.compressedSize} bits)
- Compression Ratio: ${result.compressionRatio.toFixed(3)}:1
- Space Saved: ${result.savings.toFixed(2)}%

Huffman Code Table:
${result.codes.map(([char, code]) => {
  const displayChar = char === ' ' ? '␣' : char === '\n' ? '\\n' : char === '\t' ? '\\t' : char;
  return `'${displayChar}' -> ${code}`;
}).join('\n')}

Generated by Huffman Compression Tool
`;

    const blob = new Blob([stats], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${filename.replace(/\.[^/.]+$/, '')}_compression_report.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-4">
      <Card className="p-6 bg-card/50 backdrop-blur-sm">
        <div className="flex flex-col sm:flex-row gap-4">
          <Button
            onClick={onCompress}
            disabled={!content || isCompressing}
            className="flex-1 bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-primary-foreground"
          >
            <Package2 className="h-4 w-4 mr-2" />
            {isCompressing ? 'Compressing...' : 'Compress File'}
          </Button>
          
          <Button
            variant="outline"
            onClick={onReset}
            disabled={!content && !result}
            className="flex-1"
          >
            <RotateCcw className="h-4 w-4 mr-2" />
            Reset
          </Button>
        </div>
      </Card>

      {result && (
        <Card className="p-6 bg-card/50 backdrop-blur-sm">
          <h3 className="text-lg font-semibold mb-4 flex items-center">
            <Download className="h-5 w-5 mr-2 text-success" />
            Download Results
          </h3>
          
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
            <Button 
              onClick={downloadCompressed}
              variant="outline"
              className="border-success/50 hover:bg-success/10"
            >
              <Download className="h-4 w-4 mr-2" />
              Compressed File (.huff)
            </Button>
            
            <Button 
              onClick={downloadStats}
              variant="outline"
              className="border-accent/50 hover:bg-accent/10"
            >
              <FileText className="h-4 w-4 mr-2" />
              Compression Report
            </Button>
          </div>
        </Card>
      )}

      {content && (
        <Card className="p-6 bg-card/30 backdrop-blur-sm">
          <div className="flex items-center justify-between mb-3">
            <Label className="text-sm font-medium flex items-center">
              <FileText className="h-4 w-4 mr-2" />
              File Preview
            </Label>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setShowPreview(!showPreview)}
            >
              {showPreview ? 'Hide' : 'Show'}
            </Button>
          </div>
          
          {showPreview && (
            <Textarea
              value={content.slice(0, 1000) + (content.length > 1000 ? '...' : '')}
              readOnly
              className="h-32 font-mono text-xs bg-muted/50 resize-none"
              placeholder="File content will appear here..."
            />
          )}
          
          <div className="mt-2 text-xs text-muted-foreground">
            File size: {content.length} characters
            {content.length > 1000 && ' (preview truncated)'}
          </div>
        </Card>
      )}
    </div>
  );
}